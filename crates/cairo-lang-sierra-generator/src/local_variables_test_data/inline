//! > inlining of a function with a local var.

//! > test_function_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
   bar(x)
}

//! > module_code
#[inline(always)]
fn bar(x: felt) -> felt {
    if x == 0 {
        return x + 1;
    } else {
        let a = x + x;
        // The call will force `a` to be a local variable.
        revoke_ap();
        a
    }
}

// Revokes ap since this function is recursive.
fn revoke_ap() {
  revoke_ap()
}


struct MyStruct {
    a: felt,
    b: felt,
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
  () <- match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk2,
    IsZeroResult::NonZero => blk3,
  }
End:
  Fallthrough(1, {v2 -> v1})

blk1:
Inputs:
Statements:
End:
  Return(v1)

blk2:
Inputs:
Statements:
  (v3: core::felt) <- 1u
  (v8: core::felt) <- core::felt_add(v0, v3)
End:
  Fallthrough(4, {v8 -> v4})

blk3:
Inputs: v7: core::NonZero::<core::felt>
Statements:
  (v9: core::felt) <- core::felt_add(v0, v0)
End:
  Fallthrough(5, {v9 -> v5})

blk4:
Inputs:
Statements:
End:
  Goto(1, {v4 -> v1})

blk5:
Inputs:
Statements:
  (v6: ()) <- test::revoke_ap()
End:
  Callsite({v5 -> v2})

//! > local_variables
v5

//! > block_infos
blk1: known_ap_change: true.

//! > ==========================================================================

//! > inlining of a function with a revoking goto.

//! > test_function_name
check_find_local_variables

//! > function_name
foo

//! > function_code
fn foo(x: felt) -> felt {
   bar(x) + x
}

//! > module_code
#[inline(always)]
fn bar(x: felt) -> felt {
    if x == 0 {
        revoke_ap();
        return x + 1;
    } else {
        let a = x + x;
        // The call will force `a` to be a local variable.
        revoke_ap();
        a
    }
}

// Revokes ap since this function is recursive.
fn revoke_ap() {
  revoke_ap()
}


struct MyStruct {
    a: felt,
    b: felt,
}

//! > lowering_format
blk0 (root):
Inputs: v0: core::felt
Statements:
  () <- match core::felt_is_zero(v0) {
    IsZeroResult::Zero => blk2,
    IsZeroResult::NonZero => blk3,
  }
End:
  Fallthrough(1, {v3 -> v1})

blk1:
Inputs:
Statements:
  (v10: core::felt) <- core::felt_add(v1, v0)
End:
  Fallthrough(4, {v10 -> v2})

blk2:
Inputs:
Statements:
  (v4: ()) <- test::revoke_ap()
  (v5: core::felt) <- 1u
  (v11: core::felt) <- core::felt_add(v0, v5)
End:
  Fallthrough(5, {v11 -> v6})

blk3:
Inputs: v9: core::NonZero::<core::felt>
Statements:
  (v12: core::felt) <- core::felt_add(v0, v0)
End:
  Fallthrough(6, {v12 -> v7})

blk4:
Inputs:
Statements:
End:
  Return(v2)

blk5:
Inputs:
Statements:
End:
  Goto(1, {v6 -> v1})

blk6:
Inputs:
Statements:
  (v8: ()) <- test::revoke_ap()
End:
  Callsite({v7 -> v3})

//! > local_variables
v7

//! > block_infos
blk1: known_ap_change: true.
