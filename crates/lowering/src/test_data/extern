//! > Test extern function enum calling.

//! > test_function_name
test_function_lowering

//! > function
func foo() {
  let x = f();
  match x {
    MyEnum::A(y) => (),
    MyEnum::B(y) => (),
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
}
extern func f() -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
blk0:
Inputs: v2: core::felt, v3: core::felt
Statements:
  (v4: test_crate::MyEnum) <- MyEnum::A(v3)
Drops: v3
End:
  Callsite(v2, v4)

blk1:
Inputs: v5: core::felt, v6: core::felt
Statements:
  (v7: (core::felt)) <- struct_construct(v6)
  (v8: test_crate::MyEnum) <- MyEnum::B(v7)
Drops: v7, v6
End:
  Callsite(v5, v8)

blk2:
Inputs: v9: core::felt, v10: core::felt, v11: core::felt
Statements:
  (v12: (core::felt, core::felt)) <- struct_construct(v10, v11)
  (v13: test_crate::MyEnum) <- MyEnum::C(v12)
Drops: v12, v10, v11
End:
  Callsite(v9, v13)

blk3:
Inputs: v16: core::felt
Statements:
Drops: v16
End:
  Callsite()

blk4:
Inputs: v17: (core::felt)
Statements:
Drops: v17
End:
  Callsite()

blk5:
Inputs: v18: (core::felt, core::felt)
Statements:
Drops: v18
End:
  Callsite()

blk6:
Inputs: v0: core::felt, v1: core::felt
Statements:
  (v15: core::felt, v14: test_crate::MyEnum) <- match test_crate::f(v0, v1) {
    (v2, v3) => blk0,
    (v5, v6) => blk1,
    (v9, v10, v11) => blk2,
  }
  () <- match_enum(v14) {
    MyEnum::A => blk3,
    MyEnum::B => blk4,
    MyEnum::C => blk5,
  }
Drops: v0, v1
End:
  Callsite(v15)


//! > ==========================================================================

//! > TODO(yg)

//! > test_function_name
test_function_lowering

//! > function
func foo(a: MyEnum) {
  match a {
    MyEnum::A(y) => (),
    MyEnum::B((y,)) => (),
    MyEnum::C((y,z)) => (),
  }
}

//! > function_name
foo

//! > module_code
enum MyEnum {
  A: felt,
  B: (felt,),
  C: (felt, felt),
}
extern func f(ref a: felt, b: felt) -> MyEnum nopanic;

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_format
