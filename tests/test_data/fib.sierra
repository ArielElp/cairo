type felt = felt;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc branch_align = branch_align;
libfunc drop<felt> = drop<felt>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc function_call<user@core::FeltAdd::add> = function_call<user@core::FeltAdd::add>;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@fib::fib::fib> = function_call<user@fib::fib::fib>;
libfunc felt_add = felt_add;

revoke_ap_tracking() -> ();
dup<felt>([2]) -> ([2], [3]);
felt_jump_nz([3]) { fallthrough() 8([4]) };
branch_align() -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<felt>([0]) -> ([5]);
jump() { 22() };
branch_align() -> ();
drop<NonZero<felt>>([4]) -> ();
store_temp<felt>([0]) -> ([7]);
dup<felt>([1]) -> ([1], [8]);
store_temp<felt>([8]) -> ([9]);
function_call<user@core::FeltAdd::add>([7], [9]) -> ([6]);
felt_const<1>() -> ([10]);
felt_sub([2], [10]) -> ([11]);
store_temp<felt>([1]) -> ([13]);
store_temp<felt>([6]) -> ([14]);
store_temp<felt>([11]) -> ([11]);
rename<felt>([11]) -> ([15]);
function_call<user@fib::fib::fib>([13], [14], [15]) -> ([12]);
rename<felt>([12]) -> ([5]);
rename<felt>([5]) -> ([16]);
return([16]);
felt_add([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([2]);
rename<felt>([2]) -> ([3]);
return([3]);

fib::fib::fib@0([0]: felt, [1]: felt, [2]: felt) -> (felt);
core::FeltAdd::add@24([0]: felt, [1]: felt) -> (felt);
