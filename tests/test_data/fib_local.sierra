type felt = felt;
type NonZero<felt> = NonZero<felt>;

libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<felt> = drop<felt>;
libfunc felt_const<1> = felt_const<1>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc burn_gas = burn_gas;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_sub = felt_sub;
libfunc rename<felt> = rename<felt>;
libfunc function_call<user@test_crate::fib> = function_call<user@test_crate::fib>;
libfunc felt_const<2> = felt_const<2>;
libfunc felt_add = felt_add;

revoke_ap_tracking() -> ();
dup<felt>([0]) -> ([0], [19]);
felt_jump_nz([19]) { fallthrough() 8([1]) };
drop<felt>([0]) -> ();
felt_const<1>() -> ([2]);
store_temp<felt>([2]) -> ([3]);
burn_gas() -> ();
jump() { 37() };
drop<NonZero<felt>>([1]) -> ();
felt_const<1>() -> ([4]);
dup<felt>([0]) -> ([0], [20]);
felt_sub([20], [4]) -> ([5]);
store_temp<felt>([5]) -> ([5]);
felt_jump_nz([5]) { fallthrough() 19([6]) };
drop<felt>([0]) -> ();
felt_const<1>() -> ([7]);
store_temp<felt>([7]) -> ([8]);
burn_gas() -> ();
jump() { 35() };
drop<NonZero<felt>>([6]) -> ();
felt_const<1>() -> ([9]);
dup<felt>([0]) -> ([0], [21]);
felt_sub([21], [9]) -> ([10]);
store_temp<felt>([10]) -> ([10]);
rename<felt>([10]) -> ([12]);
function_call<user@test_crate::fib>([12]) -> ([11]);
felt_const<2>() -> ([13]);
felt_sub([0], [13]) -> ([14]);
store_temp<felt>([14]) -> ([14]);
rename<felt>([14]) -> ([16]);
function_call<user@test_crate::fib>([16]) -> ([15]);
felt_add([11], [15]) -> ([17]);
store_temp<felt>([17]) -> ([17]);
rename<felt>([17]) -> ([8]);
burn_gas() -> ();
rename<felt>([8]) -> ([3]);
burn_gas() -> ();
rename<felt>([3]) -> ([18]);
burn_gas() -> ();
return([18]);

test_crate::fib@0([0]: felt) -> (felt);
