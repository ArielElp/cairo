//! > null libfunc

//! > test_comments
// TODO(lior): Cost should be 2 rather than 1.

//! > test_function_name
run_small_e2e_test

//! > cairo
func foo() -> Nullable::<felt> {
    null::<felt>()
}

//! > casm
[ap + 0] = 0, ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 1})

//! > sierra_code
type felt = felt;
type Nullable<felt> = Nullable<felt>;

libfunc null<felt> = null<felt>;
libfunc store_temp<Nullable<felt>> = store_temp<Nullable<felt>>;
libfunc rename<Nullable<felt>> = rename<Nullable<felt>>;

null<felt>() -> ([0]);
store_temp<Nullable<felt>>([0]) -> ([0]);
rename<Nullable<felt>>([0]) -> ([1]);
return([1]);

test::foo@0() -> (Nullable<felt>);

//! > ==========================================================================

//! > into_nullable libfunc

//! > test_function_name
run_small_e2e_test

//! > cairo
func foo() -> Nullable::<felt> {
    into_nullable::<felt>(into_box::<felt>(7))
}

//! > casm
[ap + 0] = 7, ap++;
%{ memory[ap + 0] = segments.add() %}
[ap + -1] = [[ap + 0] + 0], ap++;
[ap + 0] = [ap + -1], ap++;
ret;

//! > function_costs
test::foo: OrderedHashMap({Step: 3})

//! > sierra_code
type felt = felt;
type Box<felt> = Box<felt>;
type Nullable<felt> = Nullable<felt>;

libfunc felt_const<7> = felt_const<7>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc into_box<felt> = into_box<felt>;
libfunc store_temp<Box<felt>> = store_temp<Box<felt>>;
libfunc into_nullable<felt> = into_nullable<felt>;
libfunc store_temp<Nullable<felt>> = store_temp<Nullable<felt>>;

felt_const<7>() -> ([0]);
store_temp<felt>([0]) -> ([0]);
into_box<felt>([0]) -> ([1]);
store_temp<Box<felt>>([1]) -> ([1]);
into_nullable<felt>([1]) -> ([2]);
store_temp<Nullable<felt>>([2]) -> ([3]);
return([3]);

test::foo@0() -> (Nullable<felt>);
